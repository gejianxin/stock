# import math
# import requests
# from requests.exceptions import Timeout, ProxyError
# from config.essential import DB, TOKEN, PROXY, BASEURL, URL
# from tools.data import get_all_tickers, update_ticker_data
# from tools.proxy import get_proxy
from datetime import datetime as dt
import pandas as pd
import numpy as np
import talib
from config.essential import DB, TOKEN
from tools.data_baostock import get_all_tickers, update_db_data, get_db_data
from tools.algrorithm import thresholding_algo, ma_power
from config.analyze import rolling_poly9, hma


# docker run command
# docker run -it -e POSTGRES_PASSWORD=123456 -v /d/project/data:/var/lib/postgresql/data -p 5432:5432 --name db postgres:latest bash
# chown postgres:postgres /var/lib/postgresql/data
# initdb /var/lib/postgresql/data
# docker start db
# docker attach db
# 后台启动pg server
# pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/data/logfile start


if __name__ == '__main__':
    # tickers = get_all_tickers(token=TOKEN)
    # for i in range(len(tickers)):
    #     update_db_data(ticker=tickers['code'][i], db=DB, fromdate='2010-01-01')

    # for ticker in tickers:
    records = get_db_data(ticker='sh.600000', db=DB, fromdate='2016-01-01', todate='2019-09-12')
    df = pd.DataFrame(data=records)
    df.columns = ['date', 'open', 'high', 'low', 'close', 'adjust close', 'volume']
    df = df[['date', 'open', 'high', 'low', 'close', 'volume']]
    df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')
    df.set_index(keys='date', inplace=True)

    signals = thresholding_algo(df['close'], lag=5, threshold=3.5, influence=0.5)
    df['signals'] = signals[0]
    # signal[0] 输出以下列表，其中 1 代表极大值点， -1 代表极小值点
    # [ 0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  1.  0.  0.  0.  0.  1.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1. -1. -1.  0.  0.  0. -1.
    # -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0. -1. -1. -1.  0.  0.  0.  0.  0.  0.  0. -1. -1.  0.
    # 0.  0.  0. -1. -1.  0.  0. -1.  0.  0.  0.  0.  0.  0.  0. -1.  0.  0.
    # 0.  0. -1. -1. -1. -1. -1.  0. -1.  0.  0.  0.  0.  0.  0.  0.  0.  1.
    # 0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  0.  0.  0.  0.  1.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.
    # 0.  0.  1.  0. -1.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  1.  0.
    # 0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0. -1.  0.  0.  0.  0.
    # 0.  0. -1. -1. -1. -1. -1.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  1.
    # 1.  0.  0.  1.  1.  0.  0.  0.  1.  0.  1.  0.  1.  1.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0. -1. -1. -1.
    # 0.  0.  0.  0.  0.  0.  0.  0. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  1.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.
    # 0.  0.  0. -1.  0.  0. -1. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  1.  1.  0.  0.  0.  0. -1. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  1.  1.  1.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.
    # 1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # -1. -1.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  1.  1.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0. -1. -1. -1.
    # -1.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.
    # -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1. -1.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  1.  1.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0. -1.  0.  0.  0.  1.  1.  1.  0.  0.  0.  0.  0.  0.  0. -1.  0.
    # -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  1.  1.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0.  0.  0.  0.  1.  0.
    # 0.  0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0. -1. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1. -1.
    # -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1.
    # -1. -1.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  1.  1.  0.  0.
    # 0.  0.  0.  1.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0. -1.  0.  0.  0.  0. -1.  1.  1.  1.  1.  1.  0.  0.  0.  0.
    # 0.  0.  1.  1.  0.  0.  0. -1.  0.  0.  0.  0.  1.  1.  0.  0.  0.  1.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  1.  1.  0.  0. -1. -1.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0. -1.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0. -1.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]

    # 从以上输出列表中查找极小值点对应的时间，输出以下内容
    # print(df[signals[0]==-1].index)
    # DatetimeIndex(['2018-02-09', '2018-02-12', '2018-03-14', '2018-03-15',
    #            '2018-03-16', '2018-03-19', '2018-03-23', '2018-03-26',
    #            '2018-03-27', '2018-05-02', '2018-05-03', '2018-05-04',
    #            '2018-05-16', '2018-05-17', '2018-05-24', '2018-05-25',
    #            '2018-05-30', '2018-06-11', '2018-06-19', '2018-06-20',
    #            '2018-06-21', '2018-06-22', '2018-06-25', '2018-06-27',
    #            '2018-10-09', '2018-12-11', '2018-12-20', '2018-12-21',
    #            '2018-12-24', '2018-12-25', '2018-12-26', '2019-03-08',
    #            '2019-03-11', '2019-03-12', '2019-03-25', '2019-03-26',
    #            '2019-05-23', '2019-07-03', '2019-07-08', '2019-07-09',
    #            '2019-07-10', '2019-08-02', '2019-08-05', '2019-08-06',
    #            '2019-11-11', '2019-11-12', '2019-11-21', '2020-01-16',
    #            '2020-01-22', '2020-01-23', '2020-02-03', '2020-02-04',
    #            '2020-02-28', '2020-03-17', '2020-03-18', '2020-03-19',
    #            '2020-05-22', '2020-06-11', '2020-06-15', '2020-07-24',
    #            '2020-09-02', '2020-09-03', '2020-09-04', '2020-09-22',
    #            '2020-09-23', '2020-09-24', '2020-09-25', '2020-10-27',
    #            '2020-10-28', '2020-10-29', '2020-10-30', '2020-12-23',
    #            '2020-12-30', '2021-01-25', '2021-03-19', '2021-03-22',
    #            '2021-04-15', '2021-04-26', '2021-04-30', '2021-06-15',
    #            '2021-06-16'],
    #           dtype='datetime64[ns]', name='date', freq=None)
    # print(df[signals[0]==1].index)
    # DatetimeIndex(['2018-01-10', '2018-01-11', '2018-01-18', '2018-01-25',
    #            '2018-04-11', '2018-07-10', '2018-07-20', '2018-07-23',
    #            '2018-07-24', '2018-07-31', '2018-08-24', '2018-08-27',
    #            '2018-08-28', '2018-09-21', '2018-09-28', '2018-10-22',
    #            '2018-10-25', '2018-11-02', '2018-11-05', '2018-12-03',
    #            '2018-12-04', '2019-01-07', '2019-01-14', '2019-01-15',
    #            '2019-01-18', '2019-01-21', '2019-01-25', '2019-01-29',
    #            '2019-01-31', '2019-02-01', '2019-02-25', '2019-02-26',
    #            '2019-04-16', '2019-04-17', '2019-04-18', '2019-06-20',
    #            '2019-06-21', '2019-07-25', '2019-07-26', '2019-08-23',
    #            '2019-09-04', '2019-09-05', '2019-09-06', '2019-09-09',
    #            '2019-09-10', '2019-09-11', '2019-10-11', '2019-10-14',
    #            '2019-10-15', '2019-10-16', '2019-12-13', '2019-12-16',
    #            '2019-12-17', '2019-12-18', '2020-01-02', '2020-01-03',
    #            '2020-02-17', '2020-02-18', '2020-04-27', '2020-04-28',
    #            '2020-04-29', '2020-04-30', '2020-05-28', '2020-05-29',
    #            '2020-06-01', '2020-07-01', '2020-07-02', '2020-07-03',
    #            '2020-07-06', '2020-07-07', '2020-08-04', '2020-08-17',
    #            '2020-08-18', '2020-11-11', '2020-11-18', '2020-11-19',
    #            '2020-11-27', '2020-12-01', '2020-12-31', '2021-01-04',
    #            '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-18',
    #            '2021-01-19', '2021-02-01', '2021-02-02', '2021-02-08',
    #            '2021-03-15', '2021-03-16', '2021-03-30', '2021-03-31',
    #            '2021-05-26'],
    #           dtype='datetime64[ns]', name='date', freq=None)

    ma_ratio = ma_power(df)
    df['ma_ratio'] = ma_ratio
    # ma_ratio 返回以下列表，数值代表 5~30 日 MA 指标呈多头排列的比例
    # [0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.58666667
    # 0.43333333 0.33666667 0.26333333 0.20666667 0.15333333 0.11666667
    # 0.09       0.07       0.05333333 0.04333333 0.04       0.03666667
    # 0.03666667 0.03666667 0.05333333 0.06666667 0.07       0.06
    # 0.03333333 0.02333333 0.01333333 0.00666667 0.00333333 0.
    # 0.         0.         0.         0.         0.         0.00333333
    # 0.01       0.01       0.00333333 0.03       0.07666667 0.10666667
    # 0.14       0.18       0.20333333 0.23       0.26       0.24333333
    # 0.25333333 0.35666667 0.40666667 0.35666667 0.33       0.17
    # 0.05       0.01666667 0.00333333 0.         0.         0.
    # 0.00666667 0.02666667 0.04333333 0.06       0.06333333 0.06666667
    # 0.06666667 0.06333333 0.05       0.04333333 0.02666667 0.02
    # 0.01333333 0.01       0.         0.         0.         0.
    # 0.01333333 0.03       0.02666667 0.02       0.01666667 0.00666667
    # 0.00333333 0.00333333 0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.00333333 0.00333333 0.00333333 0.00666667 0.02
    # 0.04666667 0.09666667 0.14333333 0.18       0.2        0.26333333
    # 0.31333333 0.44666667 0.58333333 0.70333333 0.8        0.86
    # 0.91333333 0.95666667 0.98       0.99333333 0.98333333 0.95333333
    # 0.92       0.90333333 0.87666667 0.90666667 0.91666667 0.91666667
    # 0.91333333 0.90333333 0.89333333 0.85       0.86333333 0.86
    # 0.86333333 0.87333333 0.93333333 0.95333333 0.97333333 0.98333333
    # 0.98333333 0.98       0.97666667 0.97       0.95333333 0.93
    # 0.90333333 0.86       0.76       0.65333333 0.62       0.59666667
    # 0.51       0.54       0.56666667 0.58       0.67333333 0.72666667
    # 0.78333333 0.84666667 0.89333333 0.88       0.86       0.82333333
    # 0.61333333 0.53333333 0.45333333 0.37       0.36       0.33666667
    # 0.36333333 0.51333333 0.59       0.68666667 0.77666667 0.86666667
    # 0.91       0.93666667 0.96666667 0.97666667 0.98666667 0.99333333
    # 0.99333333 0.99666667 0.99666667 0.98333333 0.94333333 0.89666667
    # 0.83       0.77       0.7        0.64666667 0.55666667 0.46666667
    # 0.36666667 0.26666667 0.18666667 0.13       0.09       0.05333333
    # 0.03666667 0.05333333 0.16333333 0.27333333 0.37333333 0.46333333
    # 0.53333333 0.58       0.61666667 0.64666667 0.6        0.59
    # 0.50666667 0.43333333 0.34666667 0.27       0.19666667 0.12
    # 0.06333333 0.03       0.02       0.         0.         0.00666667
    # 0.03       0.05333333 0.08333333 0.12333333 0.17       0.21333333
    # 0.26333333 0.32666667 0.41       0.51       0.61       0.69333333
    # 0.76666667 0.83       0.87666667 0.91       0.95333333 0.97666667
    # 0.99333333 1.         1.         1.         1.         1.
    # 0.99666667 0.99666667 1.         0.99333333 0.98666667 0.99333333
    # 1.         1.         1.         1.         1.         0.99666667
    # 0.99666667 0.99666667 0.99666667 0.99       0.96       0.92
    # 0.87       0.80666667 0.75333333 0.70666667 0.66       0.61666667
    # 0.57       0.52       0.33       0.22666667 0.17333333 0.12666667
    # 0.08666667 0.06       0.04666667 0.05       0.13666667 0.24
    # 0.32666667 0.4        0.47333333 0.53333333 0.57333333 0.67
    # 0.77333333 0.85666667 0.92666667 0.94333333 0.94666667 0.95
    # 0.93       0.86       0.79333333 0.78666667 0.74666667 0.72666667
    # 0.69333333 0.54       0.41333333 0.31333333 0.24333333 0.17666667
    # 0.12333333 0.09333333 0.08333333 0.09333333 0.08333333 0.05
    # 0.03333333 0.02333333 0.01666667 0.01666667 0.02       0.03
    # 0.05       0.07333333 0.17666667 0.30333333 0.46333333 0.56666667
    # 0.71666667 0.82333333 0.92       0.97       0.99666667 1.
    # 1.         1.         1.         1.         1.         0.97333333
    # 0.93666667 0.88333333 0.81666667 0.73       0.66       0.57
    # 0.44666667 0.36       0.29333333 0.22666667 0.18       0.14
    # 0.11333333 0.09333333 0.1        0.12333333 0.14333333 0.16666667
    # 0.22       0.37666667 0.50333333 0.60333333 0.69666667 0.76333333
    # 0.81333333 0.83333333 0.81666667 0.69       0.57333333 0.51666667
    # 0.46333333 0.41333333 0.34       0.26       0.20666667 0.14666667
    # 0.12       0.10666667 0.13       0.17333333 0.24333333 0.29
    # 0.33666667 0.37666667 0.37333333 0.35666667 0.35666667 0.36666667
    # 0.45       0.65       0.86       0.93666667 0.97333333 0.99
    # 0.99666667 0.99666667 0.99666667 1.         0.99666667 0.98666667
    # 0.96666667 0.94333333 0.91666667 0.89       0.86       0.83
    # 0.82333333 0.85333333 0.86       0.95666667 0.99666667 1.
    # 1.         1.         1.         1.         0.99333333 0.98333333
    # 0.96666667 0.95333333 0.93       0.9        0.86       0.81
    # 0.76333333 0.71666667 0.67333333 0.64666667 0.63       0.57666667
    # 0.46       0.31       0.19333333 0.13       0.07666667 0.03666667
    # 0.01666667 0.00333333 0.         0.         0.         0.
    # 0.         0.00666667 0.01333333 0.00666667 0.00333333 0.
    # 0.         0.         0.         0.00333333 0.03333333 0.06
    # 0.13       0.21666667 0.39       0.53666667 0.66       0.75666667
    # 0.82333333 0.87333333 0.92       0.93666667 0.95       0.93666667
    # 0.92666667 0.94333333 0.96       0.96666667 0.96666667 0.96666667
    # 0.96333333 0.94666667 0.92333333 0.89       0.81666667 0.71333333
    # 0.61333333 0.5        0.39       0.22333333 0.04666667 0.00333333
    # 0.         0.         0.         0.         0.00333333 0.01
    # 0.02333333 0.04       0.05333333 0.08666667 0.12       0.15333333
    # 0.2        0.26333333 0.31333333 0.37333333 0.43666667 0.49666667
    # 0.52       0.54666667 0.58333333 0.60666667 0.66       0.73333333
    # 0.68333333 0.61666667 0.50333333 0.36666667 0.28333333 0.20666667
    # 0.15333333 0.1        0.05333333 0.03333333 0.01333333 0.00333333
    # 0.         0.00333333 0.01666667 0.03666667 0.06       0.08666667
    # 0.11333333 0.13333333 0.15333333 0.18333333 0.23       0.28
    # 0.31666667 0.37       0.39333333 0.39       0.41333333 0.41
    # 0.32333333 0.27333333 0.25333333 0.24333333 0.26333333 0.34
    # 0.77666667 0.94333333 0.96       0.97666667 0.98       0.98
    # 0.97       0.95333333 0.92666667 0.89666667 0.85666667 0.81666667
    # 0.78       0.73333333 0.65666667 0.59       0.48666667 0.44333333
    # 0.46666667 0.59       0.70666667 0.8        0.84333333 0.87
    # 0.89666667 0.90666667 0.91333333 0.91666667 0.90666667 0.90333333
    # 0.86666667 0.80666667 0.73333333 0.67333333 0.62666667 0.59666667
    # 0.55       0.56       0.56333333 0.55666667 0.65333333 0.74333333
    # 0.83       0.99666667 1.         1.         1.         1.
    # 0.99666667 0.98666667 0.96666667 0.93333333 0.89333333 0.86
    # 0.81666667 0.8        0.74       0.60666667 0.46       0.36
    # 0.29       0.23333333 0.18666667 0.14666667 0.12333333 0.10333333
    # 0.09666667 0.09666667 0.11333333 0.12333333 0.14666667 0.17
    # 0.21       0.29       0.34666667 0.40333333 0.45333333 0.51
    # 0.52333333 0.52       0.47666667 0.43666667 0.42333333 0.37666667
    # 0.31666667 0.20666667 0.09       0.04333333 0.02666667 0.02
    # 0.00666667 0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.01       0.02666667 0.05666667 0.10333333 0.15       0.19666667
    # 0.26333333 0.33333333 0.39666667 0.45333333 0.46666667 0.40333333
    # 0.34       0.25333333 0.20333333 0.18       0.15666667 0.13666667
    # 0.13666667 0.15       0.17333333 0.21       0.22333333 0.22333333
    # 0.24666667 0.30666667 0.43333333 0.55666667 0.63       0.72333333
    # 0.78       0.84       0.88333333 0.92666667 0.95333333 0.97666667
    # 0.99333333 1.         1.         0.99666667 0.98333333 0.95666667
    # 0.90666667 0.83       0.75       0.65666667 0.55666667 0.47666667
    # 0.40333333 0.34333333 0.27666667 0.22       0.16       0.11
    # 0.07333333 0.04333333 0.02       0.01666667 0.03333333 0.05666667
    # 0.12       0.21666667 0.31333333 0.38666667 0.48       0.57333333
    # 0.65333333 0.73333333 0.83       0.93       0.96666667 0.98666667
    # 0.98666667 0.97333333 0.92333333 0.85333333 0.75666667 0.70666667
    # 0.80666667 0.88333333 0.91333333 0.93666667 0.97666667 0.99333333
    # 0.99666667 0.99666667 1.         1.         1.         1.
    # 1.         0.99666667 0.97       0.92333333 0.86666667 0.86
    # 0.84666667 0.87       0.87333333 0.87333333 0.86666667 0.87333333
    # 0.87333333 0.92       0.95666667 0.96333333 0.97       0.96333333
    # 0.94666667 0.89666667 0.77666667 0.66333333 0.58       0.45333333
    # 0.45333333 0.44333333 0.44333333 0.44       0.43666667 0.39666667
    # 0.32       0.21333333 0.18       0.15       0.13333333 0.11333333
    # 0.09       0.07       0.05333333 0.04333333 0.05       0.04666667
    # 0.02333333 0.01666667 0.01333333 0.01333333 0.00666667 0.00666667
    # 0.00333333 0.00333333 0.00333333 0.00666667 0.00333333 0.01333333
    # 0.03       0.06333333 0.09666667 0.13       0.16       0.17
    # 0.22666667 0.32333333 0.41       0.52333333 0.61       0.67
    # 0.73333333 0.78333333 0.81666667 0.81       0.84666667 0.84666667
    # 0.84333333 0.8        0.61       0.46333333 0.35       0.28
    # 0.20666667 0.15333333 0.11       0.07333333 0.05666667 0.04333333
    # 0.03666667 0.03       0.03666667 0.01666667 0.00666667 0.00666667
    # 0.01       0.00333333 0.00333333 0.01       0.01333333 0.01      ]

    # 输出 MA 强度大于 50% 的值对应的日期
    # print(df[ma_ratio>0.5].index)
    # DatetimeIndex(['2018-02-12', '2018-07-23', '2018-07-24', '2018-07-25',
    #            '2018-07-26', '2018-07-27', '2018-07-30', '2018-07-31',
    #            '2018-08-01', '2018-08-02',
    #            ...
    #            '2021-06-01', '2021-06-02', '2021-06-03', '2021-06-04',
    #            '2021-06-07', '2021-06-08', '2021-06-09', '2021-06-10',
    #            '2021-06-11', '2021-06-15'],
    #           dtype='datetime64[ns]', name='date', length=381, freq=None)

    candidate = []

    rsi = talib.RSI(df['close'], timeperiod=6)
    df['rsi'] = rsi

    for i in range(len(rsi)):
        signal = 0
        if i >= 2:
            signal = signals[0][i] + signals[0][i-1] + signals[0][i-2]
        elif i == 1:
            signal = signals[0][i] + signals[0][i-1]
        else:
            signal = signals[0][i]
        if signal <= -1 and rsi[i] < 20:
        # if signal <= -1 and (ma_ratio[i] > 0.5 or ma_ratio[i] < 0.1) and rsi[i] < 20:
            candidate.append(i)

    # print(df.index[candidate])
    # DatetimeIndex(['2018-03-16', '2018-03-23', '2018-03-26', '2018-03-27',
    #            '2018-03-28', '2018-03-29', '2018-05-03', '2018-05-04',
    #            '2018-05-07', '2018-05-30', '2018-06-19', '2018-06-20',
    #            '2018-06-21', '2018-06-22', '2018-06-25', '2018-06-26',
    #            '2018-06-27', '2018-12-21', '2018-12-24', '2018-12-25',
    #            '2018-12-26', '2018-12-27', '2019-03-25', '2019-08-05',
    #            '2019-08-06', '2019-08-07', '2020-01-22', '2020-01-23',
    #            '2020-02-03', '2020-02-04', '2020-02-05', '2020-03-18',
    #            '2020-03-19', '2020-09-04', '2020-09-07', '2020-09-23',
    #            '2020-09-24', '2020-09-25', '2020-09-28', '2020-09-29'],
    #           dtype='datetime64[ns]', name='date', freq=None)

    candidate.clear()

    for i in range(len(rsi)):
        signal = 0
        if i >= 2:
            signal = signals[0][i] + signals[0][i-1] + signals[0][i-2]
        elif i == 1:
            signal = signals[0][i] + signals[0][i-1]
        else:
            signal = signals[0][i]
        if signal >= 1 and rsi[i] > 80:
        # if signal <= -1 and (ma_ratio[i] > 0.5 or ma_ratio[i] < 0.1) and rsi[i] < 20:
            candidate.append(i)

    print(df.index[candidate])
    # 输出符合 RSI>80 的极大值点
    # DatetimeIndex(['2018-01-10', '2018-07-31', '2018-12-04', '2019-01-18',
    #            '2019-02-25', '2019-06-20', '2019-09-09', '2019-09-10',
    #            '2019-09-11', '2019-09-12', '2019-10-11', '2019-10-14',
    #            '2019-10-15', '2019-10-16', '2019-10-17', '2019-12-17',
    #            '2019-12-18', '2019-12-19', '2019-12-20', '2020-01-03',
    #            '2020-04-29', '2020-04-30', '2020-07-02', '2020-07-03',
    #            '2020-07-06', '2020-07-07', '2020-07-08', '2020-11-27',
    #            '2021-01-18', '2021-01-19'],
    #           dtype='datetime64[ns]', name='date', freq=None)

    # print(ma_ratio[candidate])
    # [0.         0.98       0.16333333 0.51       1.         1.
    # 0.93666667 0.97333333 0.99       0.99666667 0.95666667 0.99666667
    # 1.         1.         1.         0.39       0.53666667 0.66
    # 0.75666667 0.96       0.77666667 0.94333333 0.74333333 0.83
    # 0.99666667 1.         1.         0.92666667 0.83       0.93      ]

    # print(df.index[candidate][ma_ratio[candidate]<0.8])
    # DatetimeIndex(['2018-01-10', '2018-12-04', '2019-01-18', '2019-12-17',
    #            '2019-12-18', '2019-12-19', '2019-12-20', '2020-04-29',
    #            '2020-07-02'],
    #           dtype='datetime64[ns]', name='date', freq=None)

    df['HMA10'] = hma(df['close'].values)
    new_array = df['HMA10'][~np.isnan(df['HMA10'])]
    # fit = rolling_poly9(df['HMA10'][~np.isnan(df['HMA10'])].values,252)
    # print(fit)
    # [        nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan         nan
    #      nan         nan         nan         nan         nan 10.94983708
    # 11.00666605 11.06793995 11.13563301 11.19582513 11.23413573 11.26049532
    # 11.27697281 11.27021309 11.25060836 11.21969454 11.18082388 11.13304751
    # 11.09612423 11.14940878 11.28913731 11.49533348 11.71307171 11.92142305
    # 12.09075177 12.21063328 12.27929107 12.29438636 12.23064273 12.09264046
    # 11.90228754 11.69043505 11.4856809  11.30657453 11.17158611 11.0791938
    # 11.02079432 10.97705439 10.93217964 10.85228941 10.74070557 10.61436103
    # 10.49435382 10.41590698 10.40918565 10.47354968 10.59374244 10.76311931
    # 10.95928626 11.14294614 11.28701036 11.38411468 11.44301071 11.47785807
    # 11.54263782 11.65147168 11.79396479 11.95158737 12.08360017 12.16627254
    # 12.19260138 12.16985498 12.095757   11.99938408 11.94522002 11.94765627
    # 11.99487677 12.04046039 12.02867129 11.95860113 11.85638233 11.74749831
    # 11.65687012 11.5952652  11.55404596 11.53073344 11.52101769 11.5072065
    # 11.47644007 11.43019394 11.38532495 11.35866016 11.34207054 11.32579369
    # 11.30532081 11.2931165  11.29942159 11.33009215 11.38260699 11.45617772
    # 11.52431511 11.58327889 11.63471926 11.68692639 11.73625853 11.78352494
    # 11.82684727 11.88677232 11.95637159 12.01846859 12.02782879 11.97239663
    # 11.85923929 11.71962125 11.58498761 11.46737892 11.36486812 11.27974902
    # 11.20855565 11.13201488 11.04609727 10.95474367 10.87302199 10.82228922
    # 10.80862377 10.83023637 10.87078686 10.91728424 10.96851052 11.01906181
    # 11.06764219 11.12118635 11.20708513 11.32778871 11.47008612 11.61320176
    # 11.74163606 11.82694508 11.8527555  11.80795521 11.69843655 11.54845587
    # 11.40691697 11.31386796 11.28883163 11.31708244 11.3700508  11.42309349
    # 11.45890556 11.48770218 11.52016993 11.5649593  11.6227863  11.70148078
    # 11.7710769  11.81544733 11.82972374 11.81552608 11.78236183 11.74981612
    # 11.72816619 11.72879494 11.75958564 11.82096272 11.90426626 12.00190137
    # 12.10777826 12.21271082 12.30057949 12.35061636 12.36700372 12.35693044
    # 12.3303367  12.27791079 12.20054712 12.10619927 12.01861596 11.94511147
    # 11.88246893 11.82736714 11.7843479  11.74959626 11.7585027  11.85845707
    # 12.0574702  12.31875971 12.59962103 12.82700209 12.97199659 13.03750214
    # 13.0425669  13.02284133 12.98980234 12.93136517 12.8480854  12.73619801
    # 12.59613893 12.4602453  12.35334917 12.29858144 12.29389389 12.3137665
    # 12.31909862 12.27195013 12.16770357 12.02820925 11.87846196 11.74678506
    # 11.65977539 11.62475227 11.6195379  11.62365696 11.62888779 11.64350688
    # 11.67471252 11.72075553 11.77568458 11.83098041 11.88140749 11.9259087
    # 11.95912216 11.99354998 12.03800124 12.09306123 12.14939105 12.21011926
    # 12.26582904 12.32869183 12.40323611 12.50858928 12.63923847 12.78073688
    # 12.91181392 13.00038602 13.03868517 13.03106054 12.99705519 12.95349102
    # 12.91582614 12.88899815 12.87969765 12.89293744 12.91103252 12.92083179
    # 12.89907903 12.84343336 12.7614462  12.67052183 12.58209294 12.4891415
    # 12.38501729 12.27347157 12.1639305  12.05117227 11.91242565 11.71352329
    # 11.39030575 10.97190138 10.52636446 10.13379551  9.84681506  9.67692433
    # 9.6087273   9.6130615   9.65501253  9.72086196  9.82811232  9.97058534
    # 10.13771833 10.32454625 10.52644455 10.71808299 10.8796642  11.01394063
    # 11.12736436 11.19521128 11.22982764 11.24573264 11.2526143  11.27510902
    # 11.30753429 11.31708227 11.29355259 11.2374137  11.14904418 11.04859805
    # 10.94281623 10.83407863 10.7117987  10.56112426 10.39752325 10.22430398
    # 10.073902    9.97275973  9.93803172  9.96071507 10.02848616 10.11004031
    # 10.18102296 10.23976256 10.28802765 10.33662911 10.38724538 10.43456605
    # 10.47121263 10.4879341  10.49531882 10.49560591 10.49030195 10.48386496
    # 10.47267431 10.44591678 10.40426981 10.35173425 10.29345141 10.25554542
    # 10.25000037 10.29466042 10.38218476 10.48056429 10.55251325 10.58632333
    # 10.58228469 10.54342472 10.48179531 10.40446183 10.32150922 10.24434635
    # 10.18449644 10.14792706 10.12354559 10.08796914 10.04289146  9.99449168
    # 9.95829801  9.95572944  9.99449679 10.0711309  10.17294025 10.28359958
    # 10.38173918 10.45879692 10.50959549 10.54380456 10.56022996 10.55434555
    # 10.53259654 10.48924698 10.43597549 10.38604258 10.35245609 10.3466487
    # 10.36286057 10.38515965 10.41198151 10.44038567 10.46894915 10.50939266
    # 10.59027851 10.72654172 10.98638654 11.35576234 11.78041491 12.17574632
    # 12.45953192 12.60304667 12.60664895 12.49291031 12.30692033 12.10415683
    # 11.94103078 11.83961207 11.8010697  11.74227339 11.58973342 11.3297689
    # 11.00543422 10.68300991 10.40761536 10.19704525 10.05195592  9.98026824
    # 9.95976003  9.97142013  9.99243943 10.02044996 10.04955647 10.08973181
    # 10.14037241 10.2056428  10.30036446 10.41094727 10.51011366 10.57208201
    # 10.59557026 10.58705134 10.56233057 10.52849225 10.49083231 10.46119856
    # 10.43721238 10.41189379 10.37384616 10.31870951 10.24724275 10.16686665
    # 10.08985413 10.02298023  9.96622083  9.91534144  9.86769665  9.82062598
    # 9.77566359  9.73449173  9.7096523   9.69800406  9.68542034  9.66011104
    # 9.61371742  9.54960708  9.47985802  9.41594939  9.36434549  9.33206747
    # 9.33496245  9.36880101  9.42195334  9.48830041  9.56935735  9.65241087
    # 9.72088144  9.77478444  9.81056473  9.82993002  9.82977536  9.8063819
    # 9.75643523  9.68535554  9.59649545  9.49645671  9.39954465  9.32011299
    # 9.26464511  9.23645529  9.23320635  9.24751467  9.27818846  9.30774866
    # 9.31865275  9.31346978  9.30639441  9.32133     9.36937347  9.43964852
    # 9.53198071  9.63071136  9.71811141  9.79612881  9.8843545   9.97411318
    # 10.07515972 10.18017735 10.27697844 10.34583781 10.36907063 10.34508074
    # 10.28227409 10.19138345 10.07921805  9.96328293  9.85468778  9.75763083
    # 9.68362706  9.63756065  9.61620122  9.60139932  9.57876176  9.5446166
    # 9.50591339  9.47166862  9.4457055   9.42890637  9.43533289  9.46890658
    # 9.52430144  9.59999587  9.68751424  9.77587562  9.84427476  9.8918109
    # 9.92510798  9.95351577  9.9847756  10.03442119 10.10655771 10.17851771
    # 10.23011537 10.23835317 10.19614842 10.11176418 10.0120455   9.91251181
    # 9.84966944  9.87428575  9.97507341 10.12198484 10.28059639 10.45828708
    # 10.63854398 10.80543642 10.94228139 11.05267415 11.14621735 11.20682989
    # 11.23247739 11.210493   11.15868157 11.07068548 10.96164688 10.83274115
    # 10.73133899 10.67146456 10.65281093 10.64692297 10.63400102 10.60052884
    # 10.56454993 10.53542627 10.53669301 10.5687731  10.60708157 10.64208361
    # 10.64017888 10.59975091 10.53625693 10.46546852 10.39389832 10.33200765
    # 10.27392801 10.26155005 10.30636472 10.39161965 10.48028491 10.54551888
    # 10.57203497 10.56787311 10.54522639 10.53052208 10.53958947 10.56157539
    # 10.5715101  10.56981173 10.56515241 10.56160958 10.56979872 10.58224332
    # 10.59294761 10.58799909 10.56678013 10.53268293 10.51919724 10.50165559
    # 10.47305113 10.42436078 10.35718039 10.28382169 10.22716145 10.19518384
    # 10.19382593 10.22152408 10.27072767 10.31995589 10.35971697 10.38081829
    # 10.38397975 10.39157293 10.41837768 10.45864511 10.50542873 10.54362267
    # 10.55730675 10.54559775 10.5166641  10.47729521 10.43377674 10.39638411
    # 10.35985972 10.3227879  10.27985809 10.22101231 10.1475697  10.06831847
    # 9.99777835  9.93995164  9.89336333  9.85527638  9.82666953  9.8118549
    # 9.80707416  9.80467731  9.80216065  9.80169291  9.7966638   9.78546259
    # 9.77445472  9.76992586  9.7656393   9.75423605  9.73100512  9.69976347
    # 9.65539972]
    df['POLYNOMIAL9'] = np.r_[np.full(len(df)-len(new_array), np.nan), rolling_poly9(df['HMA10'][~np.isnan(df['HMA10'])].values,252)]

    data = df[~np.isnan(df['POLYNOMIAL9'])]
    corr = np.corrcoef(data['HMA10'],data['POLYNOMIAL9'])
    # print(corr)
    # [[1.         0.93583412]
    #  [0.93583412 1.        ]]
    corr = df['close'][len(df)-len(data):].corr(data['POLYNOMIAL9'])
    print(corr)
    # 0.9358341224745749

    # =======Test Code Start=======
    # df = pd.read_csv('data.csv', parse_dates=True, index_col=0)
    # df['HMA10'] = hma(df['Close'].values)

    # 读取HMA10列中所有非NAN项，拟合时必须剔除NAN项
    # new_array = df['HMA10'][~np.isnan(df['HMA10'])]

    # 因为计算POLYNOMIAL9剔除了HMA10中的NAN项，所以结果长度与剔除NAN项的HMA10等长
    # 要在DataFrame中增加POLYNOMIAL9列，则必须把结果长度补齐
    # np.full(len(df)-len(new_array),np.nan)用np.nan生成数组，用于补齐列
    # df['POLYNOMIAL9'] = np.r_[np.full(len(df)-len(new_array), np.nan), rolling_poly9(df['HMA10'][~np.isnan(df['HMA10'])].values,252)]
    # print(df)
    # =======Test Code End=======

    # 1. 获取所有股票名称
    # tickers = get_all_tickers(token=TOKEN)
    # 2. 获取代理列表
    # proxies = get_proxy(BASEURL, URL, proxies=[])
    # 3. 验证代理有效性
    # for proxy in proxies:
    #     try:
    #         response = requests.get('https://finance.yahoo.com/', timeout=5, proxies=dict(https=proxy))
    #         if response.status_code != 200:
    #             proxies.remove(proxy)
    #     except Timeout as error:
    #         proxies.remove(proxy)
    #         print(proxy, ' timeout')
    #     except ProxyError as error:
    #         proxies.remove(proxy)
    #         print(proxy, ' error')
    # 4. 股票分组，使用对应代理下载，避免过多爬取数据被封
    # step = math.ceil(len(tickers)/len(proxies))
    # for proxy in proxies:
    #     i,j = 0,0
    #     while j >= i*step and j <= (i+1)*step and j < len(tickers):
    #         update_ticker_data(ticker=tickers['ts_code'][j], db=DB, proxy=proxy, fromdate='2010-01-01')
    #         j += 1



# PROCEDURE DELETE ALL POSTGRESQL TABLES
# DO $$
#   DECLARE
#     r RECORD;
# BEGIN
#   FOR r IN
#     (
#       SELECT table_name
#       FROM information_schema.tables
#       WHERE table_schema=current_schema()
#     )
#   LOOP
#      EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.table_name) || ' CASCADE';
#   END LOOP;
# END $$ ;
