# import math
# import requests
# from requests.exceptions import Timeout, ProxyError
# from config.essential import DB, TOKEN, PROXY, BASEURL, URL
# from tools.data import get_all_tickers, update_ticker_data
# from tools.proxy import get_proxy
from datetime import datetime as dt
import pandas as pd
import talib
from config.essential import DB, TOKEN
from tools.data_baostock import get_all_tickers, update_db_data, get_db_data
from tools.algrorithm import thresholding_algo, ma_power


# docker run command
# docker run -it -e POSTGRES_PASSWORD=123456 -v /d/project/data:/var/lib/postgresql/data -p 5432:5432 --name db postgres:latest bash
# chown postgres:postgres /var/lib/postgresql/data
# initdb /var/lib/postgresql/data
# docker start db
# docker attach db
# 后台启动pg server
# pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/data/logfile start


if __name__ == '__main__':
    # tickers = get_all_tickers(token=TOKEN)
    # for i in range(len(tickers)):
    #     update_db_data(ticker=tickers['code'][i], db=DB, fromdate='2010-01-01')

    # for ticker in tickers:
    records = get_db_data(ticker='sh.600000', db=DB, fromdate='2018-01-01', todate=dt.today().date())
    df = pd.DataFrame(data=records)
    df.columns = ['date', 'open', 'high', 'low', 'close', 'adjust close', 'volume']
    df = df[['date', 'open', 'high', 'low', 'close', 'volume']]
    df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')
    # df['date'] = df['date'].data()
    # df['openinterest'] = 0
    # df.set_index(keys='date', inplace=True)
    print(df['close'])
    signals = thresholding_algo(df['close'], lag=5, threshold=3.5, influence=0.5)
    print(signals.shape)
    # signal[0] 输出以下列表，其中 1 代表极大值点， -1 代表极小值点
    # [ 0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  1.  0.  0.  0.  0.  1.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1. -1. -1.  0.  0.  0. -1.
    # -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0. -1. -1. -1.  0.  0.  0.  0.  0.  0.  0. -1. -1.  0.
    # 0.  0.  0. -1. -1.  0.  0. -1.  0.  0.  0.  0.  0.  0.  0. -1.  0.  0.
    # 0.  0. -1. -1. -1. -1. -1.  0. -1.  0.  0.  0.  0.  0.  0.  0.  0.  1.
    # 0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  0.  0.  0.  0.  1.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.
    # 0.  0.  1.  0. -1.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  1.  0.
    # 0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0. -1.  0.  0.  0.  0.
    # 0.  0. -1. -1. -1. -1. -1.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  1.
    # 1.  0.  0.  1.  1.  0.  0.  0.  1.  0.  1.  0.  1.  1.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0. -1. -1. -1.
    # 0.  0.  0.  0.  0.  0.  0.  0. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  1.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.
    # 0.  0.  0. -1.  0.  0. -1. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  1.  1.  0.  0.  0.  0. -1. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  1.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  1.  1.  1.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.
    # 1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # -1. -1.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  1.  1.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0. -1. -1. -1.
    # -1.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.
    # -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1. -1.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  1.  1.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0. -1.  0.  0.  0.  1.  1.  1.  0.  0.  0.  0.  0.  0.  0. -1.  0.
    # -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  1.  1.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0.  0.  0.  0.  1.  0.
    # 0.  0.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0. -1. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1. -1.
    # -1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0. -1. -1.
    # -1. -1.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.  1.  1.  0.  0.
    # 0.  0.  0.  1.  0.  1.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0. -1.  0.  0.  0.  0. -1.  1.  1.  1.  1.  1.  0.  0.  0.  0.
    # 0.  0.  1.  1.  0.  0.  0. -1.  0.  0.  0.  0.  1.  1.  0.  0.  0.  1.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  1.  1.  0.  0. -1. -1.  0.  0.  0.  0.  0.  1.  1.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0. -1.  0.  0.  0.  0.  0.  0. -1.  0.  0.  0. -1.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0. -1. -1.  0.  0.  0.  0.  0.  0.  0.  0.
    # 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]

    ma_ratio = ma_power(df)
    print(ma_ratio.shape)
    # ratio 返回以下列表，数值代表 5~30 日 MA 指标呈多头排列的比例
    # [0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.58666667
    # 0.43333333 0.33666667 0.26333333 0.20666667 0.15333333 0.11666667
    # 0.09       0.07       0.05333333 0.04333333 0.04       0.03666667
    # 0.03666667 0.03666667 0.05333333 0.06666667 0.07       0.06
    # 0.03333333 0.02333333 0.01333333 0.00666667 0.00333333 0.
    # 0.         0.         0.         0.         0.         0.00333333
    # 0.01       0.01       0.00333333 0.03       0.07666667 0.10666667
    # 0.14       0.18       0.20333333 0.23       0.26       0.24333333
    # 0.25333333 0.35666667 0.40666667 0.35666667 0.33       0.17
    # 0.05       0.01666667 0.00333333 0.         0.         0.
    # 0.00666667 0.02666667 0.04333333 0.06       0.06333333 0.06666667
    # 0.06666667 0.06333333 0.05       0.04333333 0.02666667 0.02
    # 0.01333333 0.01       0.         0.         0.         0.
    # 0.01333333 0.03       0.02666667 0.02       0.01666667 0.00666667
    # 0.00333333 0.00333333 0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.00333333 0.00333333 0.00333333 0.00666667 0.02
    # 0.04666667 0.09666667 0.14333333 0.18       0.2        0.26333333
    # 0.31333333 0.44666667 0.58333333 0.70333333 0.8        0.86
    # 0.91333333 0.95666667 0.98       0.99333333 0.98333333 0.95333333
    # 0.92       0.90333333 0.87666667 0.90666667 0.91666667 0.91666667
    # 0.91333333 0.90333333 0.89333333 0.85       0.86333333 0.86
    # 0.86333333 0.87333333 0.93333333 0.95333333 0.97333333 0.98333333
    # 0.98333333 0.98       0.97666667 0.97       0.95333333 0.93
    # 0.90333333 0.86       0.76       0.65333333 0.62       0.59666667
    # 0.51       0.54       0.56666667 0.58       0.67333333 0.72666667
    # 0.78333333 0.84666667 0.89333333 0.88       0.86       0.82333333
    # 0.61333333 0.53333333 0.45333333 0.37       0.36       0.33666667
    # 0.36333333 0.51333333 0.59       0.68666667 0.77666667 0.86666667
    # 0.91       0.93666667 0.96666667 0.97666667 0.98666667 0.99333333
    # 0.99333333 0.99666667 0.99666667 0.98333333 0.94333333 0.89666667
    # 0.83       0.77       0.7        0.64666667 0.55666667 0.46666667
    # 0.36666667 0.26666667 0.18666667 0.13       0.09       0.05333333
    # 0.03666667 0.05333333 0.16333333 0.27333333 0.37333333 0.46333333
    # 0.53333333 0.58       0.61666667 0.64666667 0.6        0.59
    # 0.50666667 0.43333333 0.34666667 0.27       0.19666667 0.12
    # 0.06333333 0.03       0.02       0.         0.         0.00666667
    # 0.03       0.05333333 0.08333333 0.12333333 0.17       0.21333333
    # 0.26333333 0.32666667 0.41       0.51       0.61       0.69333333
    # 0.76666667 0.83       0.87666667 0.91       0.95333333 0.97666667
    # 0.99333333 1.         1.         1.         1.         1.
    # 0.99666667 0.99666667 1.         0.99333333 0.98666667 0.99333333
    # 1.         1.         1.         1.         1.         0.99666667
    # 0.99666667 0.99666667 0.99666667 0.99       0.96       0.92
    # 0.87       0.80666667 0.75333333 0.70666667 0.66       0.61666667
    # 0.57       0.52       0.33       0.22666667 0.17333333 0.12666667
    # 0.08666667 0.06       0.04666667 0.05       0.13666667 0.24
    # 0.32666667 0.4        0.47333333 0.53333333 0.57333333 0.67
    # 0.77333333 0.85666667 0.92666667 0.94333333 0.94666667 0.95
    # 0.93       0.86       0.79333333 0.78666667 0.74666667 0.72666667
    # 0.69333333 0.54       0.41333333 0.31333333 0.24333333 0.17666667
    # 0.12333333 0.09333333 0.08333333 0.09333333 0.08333333 0.05
    # 0.03333333 0.02333333 0.01666667 0.01666667 0.02       0.03
    # 0.05       0.07333333 0.17666667 0.30333333 0.46333333 0.56666667
    # 0.71666667 0.82333333 0.92       0.97       0.99666667 1.
    # 1.         1.         1.         1.         1.         0.97333333
    # 0.93666667 0.88333333 0.81666667 0.73       0.66       0.57
    # 0.44666667 0.36       0.29333333 0.22666667 0.18       0.14
    # 0.11333333 0.09333333 0.1        0.12333333 0.14333333 0.16666667
    # 0.22       0.37666667 0.50333333 0.60333333 0.69666667 0.76333333
    # 0.81333333 0.83333333 0.81666667 0.69       0.57333333 0.51666667
    # 0.46333333 0.41333333 0.34       0.26       0.20666667 0.14666667
    # 0.12       0.10666667 0.13       0.17333333 0.24333333 0.29
    # 0.33666667 0.37666667 0.37333333 0.35666667 0.35666667 0.36666667
    # 0.45       0.65       0.86       0.93666667 0.97333333 0.99
    # 0.99666667 0.99666667 0.99666667 1.         0.99666667 0.98666667
    # 0.96666667 0.94333333 0.91666667 0.89       0.86       0.83
    # 0.82333333 0.85333333 0.86       0.95666667 0.99666667 1.
    # 1.         1.         1.         1.         0.99333333 0.98333333
    # 0.96666667 0.95333333 0.93       0.9        0.86       0.81
    # 0.76333333 0.71666667 0.67333333 0.64666667 0.63       0.57666667
    # 0.46       0.31       0.19333333 0.13       0.07666667 0.03666667
    # 0.01666667 0.00333333 0.         0.         0.         0.
    # 0.         0.00666667 0.01333333 0.00666667 0.00333333 0.
    # 0.         0.         0.         0.00333333 0.03333333 0.06
    # 0.13       0.21666667 0.39       0.53666667 0.66       0.75666667
    # 0.82333333 0.87333333 0.92       0.93666667 0.95       0.93666667
    # 0.92666667 0.94333333 0.96       0.96666667 0.96666667 0.96666667
    # 0.96333333 0.94666667 0.92333333 0.89       0.81666667 0.71333333
    # 0.61333333 0.5        0.39       0.22333333 0.04666667 0.00333333
    # 0.         0.         0.         0.         0.00333333 0.01
    # 0.02333333 0.04       0.05333333 0.08666667 0.12       0.15333333
    # 0.2        0.26333333 0.31333333 0.37333333 0.43666667 0.49666667
    # 0.52       0.54666667 0.58333333 0.60666667 0.66       0.73333333
    # 0.68333333 0.61666667 0.50333333 0.36666667 0.28333333 0.20666667
    # 0.15333333 0.1        0.05333333 0.03333333 0.01333333 0.00333333
    # 0.         0.00333333 0.01666667 0.03666667 0.06       0.08666667
    # 0.11333333 0.13333333 0.15333333 0.18333333 0.23       0.28
    # 0.31666667 0.37       0.39333333 0.39       0.41333333 0.41
    # 0.32333333 0.27333333 0.25333333 0.24333333 0.26333333 0.34
    # 0.77666667 0.94333333 0.96       0.97666667 0.98       0.98
    # 0.97       0.95333333 0.92666667 0.89666667 0.85666667 0.81666667
    # 0.78       0.73333333 0.65666667 0.59       0.48666667 0.44333333
    # 0.46666667 0.59       0.70666667 0.8        0.84333333 0.87
    # 0.89666667 0.90666667 0.91333333 0.91666667 0.90666667 0.90333333
    # 0.86666667 0.80666667 0.73333333 0.67333333 0.62666667 0.59666667
    # 0.55       0.56       0.56333333 0.55666667 0.65333333 0.74333333
    # 0.83       0.99666667 1.         1.         1.         1.
    # 0.99666667 0.98666667 0.96666667 0.93333333 0.89333333 0.86
    # 0.81666667 0.8        0.74       0.60666667 0.46       0.36
    # 0.29       0.23333333 0.18666667 0.14666667 0.12333333 0.10333333
    # 0.09666667 0.09666667 0.11333333 0.12333333 0.14666667 0.17
    # 0.21       0.29       0.34666667 0.40333333 0.45333333 0.51
    # 0.52333333 0.52       0.47666667 0.43666667 0.42333333 0.37666667
    # 0.31666667 0.20666667 0.09       0.04333333 0.02666667 0.02
    # 0.00666667 0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.         0.         0.         0.         0.         0.
    # 0.01       0.02666667 0.05666667 0.10333333 0.15       0.19666667
    # 0.26333333 0.33333333 0.39666667 0.45333333 0.46666667 0.40333333
    # 0.34       0.25333333 0.20333333 0.18       0.15666667 0.13666667
    # 0.13666667 0.15       0.17333333 0.21       0.22333333 0.22333333
    # 0.24666667 0.30666667 0.43333333 0.55666667 0.63       0.72333333
    # 0.78       0.84       0.88333333 0.92666667 0.95333333 0.97666667
    # 0.99333333 1.         1.         0.99666667 0.98333333 0.95666667
    # 0.90666667 0.83       0.75       0.65666667 0.55666667 0.47666667
    # 0.40333333 0.34333333 0.27666667 0.22       0.16       0.11
    # 0.07333333 0.04333333 0.02       0.01666667 0.03333333 0.05666667
    # 0.12       0.21666667 0.31333333 0.38666667 0.48       0.57333333
    # 0.65333333 0.73333333 0.83       0.93       0.96666667 0.98666667
    # 0.98666667 0.97333333 0.92333333 0.85333333 0.75666667 0.70666667
    # 0.80666667 0.88333333 0.91333333 0.93666667 0.97666667 0.99333333
    # 0.99666667 0.99666667 1.         1.         1.         1.
    # 1.         0.99666667 0.97       0.92333333 0.86666667 0.86
    # 0.84666667 0.87       0.87333333 0.87333333 0.86666667 0.87333333
    # 0.87333333 0.92       0.95666667 0.96333333 0.97       0.96333333
    # 0.94666667 0.89666667 0.77666667 0.66333333 0.58       0.45333333
    # 0.45333333 0.44333333 0.44333333 0.44       0.43666667 0.39666667
    # 0.32       0.21333333 0.18       0.15       0.13333333 0.11333333
    # 0.09       0.07       0.05333333 0.04333333 0.05       0.04666667
    # 0.02333333 0.01666667 0.01333333 0.01333333 0.00666667 0.00666667
    # 0.00333333 0.00333333 0.00333333 0.00666667 0.00333333 0.01333333
    # 0.03       0.06333333 0.09666667 0.13       0.16       0.17
    # 0.22666667 0.32333333 0.41       0.52333333 0.61       0.67
    # 0.73333333 0.78333333 0.81666667 0.81       0.84666667 0.84666667
    # 0.84333333 0.8        0.61       0.46333333 0.35       0.28
    # 0.20666667 0.15333333 0.11       0.07333333 0.05666667 0.04333333
    # 0.03666667 0.03       0.03666667 0.01666667 0.00666667 0.00666667
    # 0.01       0.00333333 0.00333333 0.01       0.01333333 0.01      ]
    # print(ma_ratio)

    candidate = []

    rsi = talib.RSI(df['close'], timeperiod=6)
    print(rsi[len(rsi)-1], rsi[len(rsi)-2], rsi[len(rsi)-3])
    # if rsi[-1] > 80 and ma_ratio[-1] > 0.9 and (signals[0][-1] == 1 or signals[0][-2] == 1 or signals[0][-3] == 1):
    #     pass


    # 1. 获取所有股票名称
    # tickers = get_all_tickers(token=TOKEN)
    # 2. 获取代理列表
    # proxies = get_proxy(BASEURL, URL, proxies=[])
    # 3. 验证代理有效性
    # for proxy in proxies:
    #     try:
    #         response = requests.get('https://finance.yahoo.com/', timeout=5, proxies=dict(https=proxy))
    #         if response.status_code != 200:
    #             proxies.remove(proxy)
    #     except Timeout as error:
    #         proxies.remove(proxy)
    #         print(proxy, ' timeout')
    #     except ProxyError as error:
    #         proxies.remove(proxy)
    #         print(proxy, ' error')
    # 4. 股票分组，使用对应代理下载，避免过多爬取数据被封
    # step = math.ceil(len(tickers)/len(proxies))
    # for proxy in proxies:
    #     i,j = 0,0
    #     while j >= i*step and j <= (i+1)*step and j < len(tickers):
    #         update_ticker_data(ticker=tickers['ts_code'][j], db=DB, proxy=proxy, fromdate='2010-01-01')
    #         j += 1



# PROCEDURE DELETE ALL POSTGRESQL TABLES
# DO $$
#   DECLARE
#     r RECORD;
# BEGIN
#   FOR r IN
#     (
#       SELECT table_name
#       FROM information_schema.tables
#       WHERE table_schema=current_schema()
#     )
#   LOOP
#      EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.table_name) || ' CASCADE';
#   END LOOP;
# END $$ ;
